% Auto-generated by cameraCalibrator app on 14-Feb-2022
%-------------------------------------------------------


% Define images to process
imageFileNames = {'C:\Users\tomer\OneDrive\Documents\university\computer_vision\git_test\DIP_Puzzle_Solver\Image20.png',...
    'C:\Users\tomer\OneDrive\Documents\university\computer_vision\git_test\DIP_Puzzle_Solver\Image21.png',...
    'C:\Users\tomer\OneDrive\Documents\university\computer_vision\git_test\DIP_Puzzle_Solver\Image22.png',...
    'C:\Users\tomer\OneDrive\Documents\university\computer_vision\git_test\DIP_Puzzle_Solver\Image23.png',...
    'C:\Users\tomer\OneDrive\Documents\university\computer_vision\git_test\DIP_Puzzle_Solver\Image24.png',...
    'C:\Users\tomer\OneDrive\Documents\university\computer_vision\git_test\DIP_Puzzle_Solver\Image25.png',...
    'C:\Users\tomer\OneDrive\Documents\university\computer_vision\git_test\DIP_Puzzle_Solver\Image26.png',...
    'C:\Users\tomer\OneDrive\Documents\university\computer_vision\git_test\DIP_Puzzle_Solver\Image27.png',...
    'C:\Users\tomer\OneDrive\Documents\university\computer_vision\git_test\DIP_Puzzle_Solver\Image28.png',...
    'C:\Users\tomer\OneDrive\Documents\university\computer_vision\git_test\DIP_Puzzle_Solver\Image29.png',...
    'C:\Users\tomer\OneDrive\Documents\university\computer_vision\git_test\DIP_Puzzle_Solver\Image30.png',...
    'C:\Users\tomer\OneDrive\Documents\university\computer_vision\git_test\DIP_Puzzle_Solver\Image31.png',...
    'C:\Users\tomer\OneDrive\Documents\university\computer_vision\git_test\DIP_Puzzle_Solver\Image32.png',...
    'C:\Users\tomer\OneDrive\Documents\university\computer_vision\git_test\DIP_Puzzle_Solver\Image33.png',...
    };
% Detect calibration pattern in images
detector = vision.calibration.monocular.CheckerboardDetector();
[imagePoints, imagesUsed] = detectPatternPoints(detector, imageFileNames);
imageFileNames = imageFileNames(imagesUsed);

% Read the first image to obtain image size
originalImage = imread(imageFileNames{1});
[mrows, ncols, ~] = size(originalImage);

% Generate world coordinates for the planar pattern keypoints
squareSize = 22;  % in units of 'millimeters'
worldPoints = generateWorldPoints(detector, 'SquareSize', squareSize);

% Calibrate the camera
[cameraParams, imagesUsed, estimationErrors] = estimateCameraParameters(imagePoints, worldPoints, ...
    'EstimateSkew', true, 'EstimateTangentialDistortion', true, ...
    'NumRadialDistortionCoefficients', 3, 'WorldUnits', 'millimeters', ...
    'InitialIntrinsicMatrix', [], 'InitialRadialDistortion', [], ...
    'ImageSize', [mrows, ncols]);

% View reprojection errors
h1=figure; showReprojectionErrors(cameraParams);

% Visualize pattern locations
h2=figure; showExtrinsics(cameraParams, 'CameraCentric');

% Display parameter estimation errors
displayErrors(estimationErrors, cameraParams);
test_img = imread("../img/temp_tests/img1.jpg");
% For example, you can use the calibration data to remove effects of lens distortion.
% undistortedImage = undistortImage(originalImage, cameraParams);
test_img = imresize(test_img,[480,640]);
undistortedImage = undistortImage(test_img, cameraParams);
figure;
imshow(undistortedImage);
figure;
imshow(test_img);
title("hello");
% See additional examples of how to use the calibration data.  At the prompt type:
% showdemo('MeasuringPlanarObjectsExample')
% showdemo('StructureFromMotionExample')
